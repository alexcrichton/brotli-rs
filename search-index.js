var searchIndex = JSON.parse('{\
"brotli2":{"doc":"Brotli Compression/Decompression for Rust","i":[[3,"CompressParams","brotli2","Parameters passed to various compression routines.",null,null],[4,"CompressMode","","Possible choices for modes of compression",null,null],[13,"Generic","","Default compression mode, the compressor does not know…",0,null],[13,"Text","","Compression mode for utf-8 formatted text input.",0,null],[13,"Font","","Compression mode in WOFF 2.0.",0,null],[0,"bufread","","I/O streams for wrapping `BufRead` types as…",null,null],[3,"BrotliEncoder","brotli2::bufread","A brotli encoder, or compressor.",null,null],[3,"BrotliDecoder","","A brotli decoder, or decompressor.",null,null],[11,"new","","Creates a new encoder which will read uncompressed data…",1,[[],["brotliencoder",3]]],[11,"from_params","","Creates a new encoder with a custom `CompressParams`.",1,[[["compressparams",3]],["brotliencoder",3]]],[11,"get_ref","","Acquires a reference to the underlying stream",1,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",1,[[]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",1,[[]]],[11,"new","","Creates a new decoder which will decompress data read from…",2,[[],["brotlidecoder",3]]],[11,"get_ref","","Acquires a reference to the underlying stream",2,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",2,[[]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",2,[[]]],[0,"raw","brotli2","Raw interface to in-memory compression/decompression streams",null,null],[3,"Decompress","brotli2::raw","In-memory state for decompressing brotli-encoded data.",null,null],[3,"Compress","","In-memory state for compressing/encoding data with brotli",null,null],[3,"Error","","Error that can happen from decompressing or compressing a…",null,null],[4,"CompressOp","","Possible choices for the operation performed by the…",null,null],[13,"Process","","Compress input data",3,null],[13,"Flush","","Compress input data, ensuring that all input so far has…",3,null],[13,"Finish","","Compress input data, ensuring that all input so far has…",3,null],[13,"EmitMetadata","","Emit a metadata block to the stream, an opaque piece of…",3,null],[4,"CoStatus","","Indication of whether a compression operation is…",null,null],[13,"Finished","","The operation completed successfully",4,null],[13,"Unfinished","","The operation has more work to do and needs to be called…",4,null],[4,"DeStatus","","Possible status results returned from decompressing.",null,null],[13,"Finished","","Decompression was successful and has finished",5,null],[13,"NeedInput","","More input is needed to continue",5,null],[13,"NeedOutput","","More output is needed to continue",5,null],[5,"decompress_buf","","Decompress data in one go in memory.",null,[[],[["error",3],["result",4]]]],[5,"compress_buf","","Compresses the data in `input` into `output`.",null,[[["compressparams",3]],[["error",3],["result",4]]]],[11,"new","","Creates a new brotli decompression/decoding stream ready…",6,[[],["decompress",3]]],[11,"decompress","","Decompress some input data and write it to a buffer of…",6,[[],[["result",4],["destatus",4],["error",3]]]],[11,"take_output","","Retrieve a slice of the internal decompressor buffer up to…",6,[[["option",4]],["option",4]]],[11,"new","","Creates a new compressor ready to encode data into brotli",7,[[],["compress",3]]],[11,"compress","","Pass some input data to the compressor and write it to a…",7,[[["compressop",4]],[["error",3],["costatus",4],["result",4]]]],[11,"take_output","","Retrieve a slice of the internal compressor buffer up to…",7,[[["option",4]],["option",4]]],[11,"set_params","","Configure the parameters of this compression session.",7,[[["compressparams",3]]]],[0,"read","brotli2","Reader-based compression/decompression streams",null,null],[3,"BrotliEncoder","brotli2::read","A compression stream which wraps an uncompressed stream of…",null,null],[3,"BrotliDecoder","","A decompression stream which wraps a compressed stream of…",null,null],[11,"new","","Create a new compression stream which will compress at the…",8,[[],["brotliencoder",3]]],[11,"from_params","","Configure the compression parameters of this encoder.",8,[[["compressparams",3]],["brotliencoder",3]]],[11,"get_ref","","Acquires a reference to the underlying stream",8,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",8,[[]]],[11,"into_inner","","Unwrap the underlying writer, finishing the compression…",8,[[]]],[11,"new","","Create a new decompression stream, which will read…",9,[[],["brotlidecoder",3]]],[11,"get_ref","","Acquires a reference to the underlying stream",9,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",9,[[]]],[11,"into_inner","","Unwrap the underlying writer, finishing the compression…",9,[[]]],[0,"write","brotli2","Writer-based compression/decompression streams",null,null],[3,"BrotliEncoder","brotli2::write","A compression stream which will have uncompressed data…",null,null],[3,"BrotliDecoder","","A compression stream which will have compressed data…",null,null],[11,"new","","Create a new compression stream which will compress at the…",10,[[],["brotliencoder",3]]],[11,"from_params","","Creates a new encoder with a custom `CompressParams`.",10,[[["compressparams",3]],["brotliencoder",3]]],[11,"get_ref","","Acquires a reference to the underlying writer.",10,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",10,[[]]],[11,"finish","","Consumes this encoder, flushing the output stream.",10,[[],["result",6]]],[11,"new","","Creates a new decoding stream which will decode all input…",11,[[],["brotlidecoder",3]]],[11,"get_ref","","Acquires a reference to the underlying writer.",11,[[]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",11,[[]]],[11,"finish","","Unwrap the underlying writer, finishing the compression…",11,[[],["result",6]]],[11,"new","brotli2","Creates a new default set of compression parameters.",12,[[],["compressparams",3]]],[11,"mode","","Set the mode of this compression.",12,[[["compressmode",4]],["compressparams",3]]],[11,"quality","","Controls the compression-speed vs compression-density…",12,[[],["compressparams",3]]],[11,"lgwin","","Sets the base 2 logarithm of the sliding window size.",12,[[],["compressparams",3]]],[11,"lgblock","","Sets the base 2 logarithm of the maximum input block size.",12,[[],["compressparams",3]]],[11,"get_lgblock_readable","","Get the current block size",12,[[]]],[11,"get_lgblock","","Get the native lgblock size",12,[[]]],[11,"get_lgwin_readable","","Get the current window size",12,[[]]],[11,"get_lgwin","","Get the native lgwin value",12,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","brotli2::bufread","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","brotli2::raw","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","brotli2::read","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","brotli2::write","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"drop","brotli2::raw","",6,[[]]],[11,"drop","","",7,[[]]],[11,"drop","brotli2::write","",10,[[]]],[11,"drop","","",11,[[]]],[11,"clone","brotli2::raw","",3,[[],["compressop",4]]],[11,"clone","","",13,[[],["error",3]]],[11,"clone","","",4,[[],["costatus",4]]],[11,"clone","","",5,[[],["destatus",4]]],[11,"clone","brotli2","",0,[[],["compressmode",4]]],[11,"clone","","",12,[[],["compressparams",3]]],[11,"eq","brotli2::raw","",3,[[["compressop",4]]]],[11,"eq","","",13,[[["error",3]]]],[11,"ne","","",13,[[["error",3]]]],[11,"eq","","",4,[[["costatus",4]]]],[11,"eq","","",5,[[["destatus",4]]]],[11,"eq","brotli2","",0,[[["compressmode",4]]]],[11,"fmt","brotli2::raw","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","brotli2","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","brotli2::raw","",13,[[["formatter",3]],["result",6]]],[11,"description","","",13,[[]]],[11,"read","brotli2::bufread","",1,[[],["result",6]]],[11,"read","","",2,[[],["result",6]]],[11,"read","brotli2::read","",8,[[],["result",6]]],[11,"read","","",9,[[],["result",6]]],[11,"write","brotli2::write","",10,[[],["result",6]]],[11,"flush","","",10,[[],["result",6]]],[11,"write","","",11,[[],["result",6]]],[11,"flush","","",11,[[],["result",6]]]],"p":[[4,"CompressMode"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[4,"CompressOp"],[4,"CoStatus"],[4,"DeStatus"],[3,"Decompress"],[3,"Compress"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[3,"BrotliEncoder"],[3,"BrotliDecoder"],[3,"CompressParams"],[3,"Error"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);